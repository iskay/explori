// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: ibc/applications/rate_limiting/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { HourEpoch, RateLimit, WhitelistedAddressPair } from "./rate_limiting";

export const protobufPackage = "ibc.applications.rate_limiting.v1";

/** GenesisState defines the ratelimit module's genesis state. */
export interface GenesisState {
  rateLimits: RateLimit[];
  whitelistedAddressPairs: WhitelistedAddressPair[];
  blacklistedDenoms: string[];
  pendingSendPacketSequenceNumbers: string[];
  hourEpoch?: HourEpoch | undefined;
}

function createBaseGenesisState(): GenesisState {
  return {
    rateLimits: [],
    whitelistedAddressPairs: [],
    blacklistedDenoms: [],
    pendingSendPacketSequenceNumbers: [],
    hourEpoch: undefined,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rateLimits) {
      RateLimit.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.whitelistedAddressPairs) {
      WhitelistedAddressPair.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.blacklistedDenoms) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.pendingSendPacketSequenceNumbers) {
      writer.uint32(34).string(v!);
    }
    if (message.hourEpoch !== undefined) {
      HourEpoch.encode(message.hourEpoch, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimits.push(RateLimit.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.whitelistedAddressPairs.push(WhitelistedAddressPair.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.blacklistedDenoms.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pendingSendPacketSequenceNumbers.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hourEpoch = HourEpoch.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      rateLimits: globalThis.Array.isArray(object?.rateLimits)
        ? object.rateLimits.map((e: any) => RateLimit.fromJSON(e))
        : [],
      whitelistedAddressPairs: globalThis.Array.isArray(object?.whitelistedAddressPairs)
        ? object.whitelistedAddressPairs.map((e: any) => WhitelistedAddressPair.fromJSON(e))
        : [],
      blacklistedDenoms: globalThis.Array.isArray(object?.blacklistedDenoms)
        ? object.blacklistedDenoms.map((e: any) => globalThis.String(e))
        : [],
      pendingSendPacketSequenceNumbers: globalThis.Array.isArray(object?.pendingSendPacketSequenceNumbers)
        ? object.pendingSendPacketSequenceNumbers.map((e: any) => globalThis.String(e))
        : [],
      hourEpoch: isSet(object.hourEpoch) ? HourEpoch.fromJSON(object.hourEpoch) : undefined,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.rateLimits?.length) {
      obj.rateLimits = message.rateLimits.map((e) => RateLimit.toJSON(e));
    }
    if (message.whitelistedAddressPairs?.length) {
      obj.whitelistedAddressPairs = message.whitelistedAddressPairs.map((e) => WhitelistedAddressPair.toJSON(e));
    }
    if (message.blacklistedDenoms?.length) {
      obj.blacklistedDenoms = message.blacklistedDenoms;
    }
    if (message.pendingSendPacketSequenceNumbers?.length) {
      obj.pendingSendPacketSequenceNumbers = message.pendingSendPacketSequenceNumbers;
    }
    if (message.hourEpoch !== undefined) {
      obj.hourEpoch = HourEpoch.toJSON(message.hourEpoch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.rateLimits = object.rateLimits?.map((e) => RateLimit.fromPartial(e)) || [];
    message.whitelistedAddressPairs =
      object.whitelistedAddressPairs?.map((e) => WhitelistedAddressPair.fromPartial(e)) || [];
    message.blacklistedDenoms = object.blacklistedDenoms?.map((e) => e) || [];
    message.pendingSendPacketSequenceNumbers = object.pendingSendPacketSequenceNumbers?.map((e) => e) || [];
    message.hourEpoch = (object.hourEpoch !== undefined && object.hourEpoch !== null)
      ? HourEpoch.fromPartial(object.hourEpoch)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
