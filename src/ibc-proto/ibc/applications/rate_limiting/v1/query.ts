// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: ibc/applications/rate_limiting/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RateLimit, WhitelistedAddressPair } from "./rate_limiting";

export const protobufPackage = "ibc.applications.rate_limiting.v1";

/** Queries all rate limits */
export interface QueryAllRateLimitsRequest {
}

/** QueryAllRateLimitsResponse returns all the rate limits stored on the chain. */
export interface QueryAllRateLimitsResponse {
  rateLimits: RateLimit[];
}

/** Queries a specific rate limit by channel ID and denom */
export interface QueryRateLimitRequest {
  denom: string;
  channelOrClientId: string;
}

/** QueryRateLimitResponse returns a rate limit by denom and channel_or_client_id combination. */
export interface QueryRateLimitResponse {
  rateLimit?: RateLimit | undefined;
}

/** Queries all the rate limits for a given chain */
export interface QueryRateLimitsByChainIDRequest {
  chainId: string;
}

/** QueryRateLimitsByChainIDResponse returns all rate-limits by a chain. */
export interface QueryRateLimitsByChainIDResponse {
  rateLimits: RateLimit[];
}

/** Queries all the rate limits for a given channel or client ID */
export interface QueryRateLimitsByChannelOrClientIDRequest {
  channelOrClientId: string;
}

/** QueryRateLimitsByChannelOrClientIDResponse returns all rate-limits by a channel or client id. */
export interface QueryRateLimitsByChannelOrClientIDResponse {
  rateLimits: RateLimit[];
}

/** Queries all blacklisted denoms */
export interface QueryAllBlacklistedDenomsRequest {
}

/** QueryAllBlacklistedDenomsResponse returns all the blacklisted denosm. */
export interface QueryAllBlacklistedDenomsResponse {
  denoms: string[];
}

/** Queries all whitelisted address pairs */
export interface QueryAllWhitelistedAddressesRequest {
}

/** QueryAllWhitelistedAddressesResponse returns all whitelisted pairs. */
export interface QueryAllWhitelistedAddressesResponse {
  addressPairs: WhitelistedAddressPair[];
}

function createBaseQueryAllRateLimitsRequest(): QueryAllRateLimitsRequest {
  return {};
}

export const QueryAllRateLimitsRequest: MessageFns<QueryAllRateLimitsRequest> = {
  encode(_: QueryAllRateLimitsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRateLimitsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRateLimitsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllRateLimitsRequest {
    return {};
  },

  toJSON(_: QueryAllRateLimitsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRateLimitsRequest>, I>>(base?: I): QueryAllRateLimitsRequest {
    return QueryAllRateLimitsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRateLimitsRequest>, I>>(_: I): QueryAllRateLimitsRequest {
    const message = createBaseQueryAllRateLimitsRequest();
    return message;
  },
};

function createBaseQueryAllRateLimitsResponse(): QueryAllRateLimitsResponse {
  return { rateLimits: [] };
}

export const QueryAllRateLimitsResponse: MessageFns<QueryAllRateLimitsResponse> = {
  encode(message: QueryAllRateLimitsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rateLimits) {
      RateLimit.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllRateLimitsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllRateLimitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimits.push(RateLimit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllRateLimitsResponse {
    return {
      rateLimits: globalThis.Array.isArray(object?.rateLimits)
        ? object.rateLimits.map((e: any) => RateLimit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAllRateLimitsResponse): unknown {
    const obj: any = {};
    if (message.rateLimits?.length) {
      obj.rateLimits = message.rateLimits.map((e) => RateLimit.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllRateLimitsResponse>, I>>(base?: I): QueryAllRateLimitsResponse {
    return QueryAllRateLimitsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllRateLimitsResponse>, I>>(object: I): QueryAllRateLimitsResponse {
    const message = createBaseQueryAllRateLimitsResponse();
    message.rateLimits = object.rateLimits?.map((e) => RateLimit.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryRateLimitRequest(): QueryRateLimitRequest {
  return { denom: "", channelOrClientId: "" };
}

export const QueryRateLimitRequest: MessageFns<QueryRateLimitRequest> = {
  encode(message: QueryRateLimitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.channelOrClientId !== "") {
      writer.uint32(18).string(message.channelOrClientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelOrClientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitRequest {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      channelOrClientId: isSet(object.channelOrClientId) ? globalThis.String(object.channelOrClientId) : "",
    };
  },

  toJSON(message: QueryRateLimitRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.channelOrClientId !== "") {
      obj.channelOrClientId = message.channelOrClientId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitRequest>, I>>(base?: I): QueryRateLimitRequest {
    return QueryRateLimitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitRequest>, I>>(object: I): QueryRateLimitRequest {
    const message = createBaseQueryRateLimitRequest();
    message.denom = object.denom ?? "";
    message.channelOrClientId = object.channelOrClientId ?? "";
    return message;
  },
};

function createBaseQueryRateLimitResponse(): QueryRateLimitResponse {
  return { rateLimit: undefined };
}

export const QueryRateLimitResponse: MessageFns<QueryRateLimitResponse> = {
  encode(message: QueryRateLimitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rateLimit !== undefined) {
      RateLimit.encode(message.rateLimit, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimit = RateLimit.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitResponse {
    return { rateLimit: isSet(object.rateLimit) ? RateLimit.fromJSON(object.rateLimit) : undefined };
  },

  toJSON(message: QueryRateLimitResponse): unknown {
    const obj: any = {};
    if (message.rateLimit !== undefined) {
      obj.rateLimit = RateLimit.toJSON(message.rateLimit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitResponse>, I>>(base?: I): QueryRateLimitResponse {
    return QueryRateLimitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitResponse>, I>>(object: I): QueryRateLimitResponse {
    const message = createBaseQueryRateLimitResponse();
    message.rateLimit = (object.rateLimit !== undefined && object.rateLimit !== null)
      ? RateLimit.fromPartial(object.rateLimit)
      : undefined;
    return message;
  },
};

function createBaseQueryRateLimitsByChainIDRequest(): QueryRateLimitsByChainIDRequest {
  return { chainId: "" };
}

export const QueryRateLimitsByChainIDRequest: MessageFns<QueryRateLimitsByChainIDRequest> = {
  encode(message: QueryRateLimitsByChainIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitsByChainIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitsByChainIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitsByChainIDRequest {
    return { chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "" };
  },

  toJSON(message: QueryRateLimitsByChainIDRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitsByChainIDRequest>, I>>(base?: I): QueryRateLimitsByChainIDRequest {
    return QueryRateLimitsByChainIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitsByChainIDRequest>, I>>(
    object: I,
  ): QueryRateLimitsByChainIDRequest {
    const message = createBaseQueryRateLimitsByChainIDRequest();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseQueryRateLimitsByChainIDResponse(): QueryRateLimitsByChainIDResponse {
  return { rateLimits: [] };
}

export const QueryRateLimitsByChainIDResponse: MessageFns<QueryRateLimitsByChainIDResponse> = {
  encode(message: QueryRateLimitsByChainIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rateLimits) {
      RateLimit.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitsByChainIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitsByChainIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimits.push(RateLimit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitsByChainIDResponse {
    return {
      rateLimits: globalThis.Array.isArray(object?.rateLimits)
        ? object.rateLimits.map((e: any) => RateLimit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryRateLimitsByChainIDResponse): unknown {
    const obj: any = {};
    if (message.rateLimits?.length) {
      obj.rateLimits = message.rateLimits.map((e) => RateLimit.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitsByChainIDResponse>, I>>(
    base?: I,
  ): QueryRateLimitsByChainIDResponse {
    return QueryRateLimitsByChainIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitsByChainIDResponse>, I>>(
    object: I,
  ): QueryRateLimitsByChainIDResponse {
    const message = createBaseQueryRateLimitsByChainIDResponse();
    message.rateLimits = object.rateLimits?.map((e) => RateLimit.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryRateLimitsByChannelOrClientIDRequest(): QueryRateLimitsByChannelOrClientIDRequest {
  return { channelOrClientId: "" };
}

export const QueryRateLimitsByChannelOrClientIDRequest: MessageFns<QueryRateLimitsByChannelOrClientIDRequest> = {
  encode(message: QueryRateLimitsByChannelOrClientIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelOrClientId !== "") {
      writer.uint32(10).string(message.channelOrClientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitsByChannelOrClientIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitsByChannelOrClientIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channelOrClientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitsByChannelOrClientIDRequest {
    return { channelOrClientId: isSet(object.channelOrClientId) ? globalThis.String(object.channelOrClientId) : "" };
  },

  toJSON(message: QueryRateLimitsByChannelOrClientIDRequest): unknown {
    const obj: any = {};
    if (message.channelOrClientId !== "") {
      obj.channelOrClientId = message.channelOrClientId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitsByChannelOrClientIDRequest>, I>>(
    base?: I,
  ): QueryRateLimitsByChannelOrClientIDRequest {
    return QueryRateLimitsByChannelOrClientIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitsByChannelOrClientIDRequest>, I>>(
    object: I,
  ): QueryRateLimitsByChannelOrClientIDRequest {
    const message = createBaseQueryRateLimitsByChannelOrClientIDRequest();
    message.channelOrClientId = object.channelOrClientId ?? "";
    return message;
  },
};

function createBaseQueryRateLimitsByChannelOrClientIDResponse(): QueryRateLimitsByChannelOrClientIDResponse {
  return { rateLimits: [] };
}

export const QueryRateLimitsByChannelOrClientIDResponse: MessageFns<QueryRateLimitsByChannelOrClientIDResponse> = {
  encode(message: QueryRateLimitsByChannelOrClientIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rateLimits) {
      RateLimit.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRateLimitsByChannelOrClientIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRateLimitsByChannelOrClientIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rateLimits.push(RateLimit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRateLimitsByChannelOrClientIDResponse {
    return {
      rateLimits: globalThis.Array.isArray(object?.rateLimits)
        ? object.rateLimits.map((e: any) => RateLimit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryRateLimitsByChannelOrClientIDResponse): unknown {
    const obj: any = {};
    if (message.rateLimits?.length) {
      obj.rateLimits = message.rateLimits.map((e) => RateLimit.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRateLimitsByChannelOrClientIDResponse>, I>>(
    base?: I,
  ): QueryRateLimitsByChannelOrClientIDResponse {
    return QueryRateLimitsByChannelOrClientIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRateLimitsByChannelOrClientIDResponse>, I>>(
    object: I,
  ): QueryRateLimitsByChannelOrClientIDResponse {
    const message = createBaseQueryRateLimitsByChannelOrClientIDResponse();
    message.rateLimits = object.rateLimits?.map((e) => RateLimit.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryAllBlacklistedDenomsRequest(): QueryAllBlacklistedDenomsRequest {
  return {};
}

export const QueryAllBlacklistedDenomsRequest: MessageFns<QueryAllBlacklistedDenomsRequest> = {
  encode(_: QueryAllBlacklistedDenomsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllBlacklistedDenomsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllBlacklistedDenomsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllBlacklistedDenomsRequest {
    return {};
  },

  toJSON(_: QueryAllBlacklistedDenomsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllBlacklistedDenomsRequest>, I>>(
    base?: I,
  ): QueryAllBlacklistedDenomsRequest {
    return QueryAllBlacklistedDenomsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllBlacklistedDenomsRequest>, I>>(
    _: I,
  ): QueryAllBlacklistedDenomsRequest {
    const message = createBaseQueryAllBlacklistedDenomsRequest();
    return message;
  },
};

function createBaseQueryAllBlacklistedDenomsResponse(): QueryAllBlacklistedDenomsResponse {
  return { denoms: [] };
}

export const QueryAllBlacklistedDenomsResponse: MessageFns<QueryAllBlacklistedDenomsResponse> = {
  encode(message: QueryAllBlacklistedDenomsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.denoms) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllBlacklistedDenomsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllBlacklistedDenomsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denoms.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllBlacklistedDenomsResponse {
    return {
      denoms: globalThis.Array.isArray(object?.denoms) ? object.denoms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: QueryAllBlacklistedDenomsResponse): unknown {
    const obj: any = {};
    if (message.denoms?.length) {
      obj.denoms = message.denoms;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllBlacklistedDenomsResponse>, I>>(
    base?: I,
  ): QueryAllBlacklistedDenomsResponse {
    return QueryAllBlacklistedDenomsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllBlacklistedDenomsResponse>, I>>(
    object: I,
  ): QueryAllBlacklistedDenomsResponse {
    const message = createBaseQueryAllBlacklistedDenomsResponse();
    message.denoms = object.denoms?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryAllWhitelistedAddressesRequest(): QueryAllWhitelistedAddressesRequest {
  return {};
}

export const QueryAllWhitelistedAddressesRequest: MessageFns<QueryAllWhitelistedAddressesRequest> = {
  encode(_: QueryAllWhitelistedAddressesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllWhitelistedAddressesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllWhitelistedAddressesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllWhitelistedAddressesRequest {
    return {};
  },

  toJSON(_: QueryAllWhitelistedAddressesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllWhitelistedAddressesRequest>, I>>(
    base?: I,
  ): QueryAllWhitelistedAddressesRequest {
    return QueryAllWhitelistedAddressesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllWhitelistedAddressesRequest>, I>>(
    _: I,
  ): QueryAllWhitelistedAddressesRequest {
    const message = createBaseQueryAllWhitelistedAddressesRequest();
    return message;
  },
};

function createBaseQueryAllWhitelistedAddressesResponse(): QueryAllWhitelistedAddressesResponse {
  return { addressPairs: [] };
}

export const QueryAllWhitelistedAddressesResponse: MessageFns<QueryAllWhitelistedAddressesResponse> = {
  encode(message: QueryAllWhitelistedAddressesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addressPairs) {
      WhitelistedAddressPair.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllWhitelistedAddressesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllWhitelistedAddressesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addressPairs.push(WhitelistedAddressPair.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllWhitelistedAddressesResponse {
    return {
      addressPairs: globalThis.Array.isArray(object?.addressPairs)
        ? object.addressPairs.map((e: any) => WhitelistedAddressPair.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAllWhitelistedAddressesResponse): unknown {
    const obj: any = {};
    if (message.addressPairs?.length) {
      obj.addressPairs = message.addressPairs.map((e) => WhitelistedAddressPair.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllWhitelistedAddressesResponse>, I>>(
    base?: I,
  ): QueryAllWhitelistedAddressesResponse {
    return QueryAllWhitelistedAddressesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllWhitelistedAddressesResponse>, I>>(
    object: I,
  ): QueryAllWhitelistedAddressesResponse {
    const message = createBaseQueryAllWhitelistedAddressesResponse();
    message.addressPairs = object.addressPairs?.map((e) => WhitelistedAddressPair.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Queries all rate limits */
  AllRateLimits(request: QueryAllRateLimitsRequest): Promise<QueryAllRateLimitsResponse>;
  /**
   * Queries a specific rate limit by channel ID and denom
   * Ex:
   *  - /ratelimit/{channel_or_client_id}/by_denom?denom={denom}
   */
  RateLimit(request: QueryRateLimitRequest): Promise<QueryRateLimitResponse>;
  /** Queries all the rate limits for a given chain */
  RateLimitsByChainID(request: QueryRateLimitsByChainIDRequest): Promise<QueryRateLimitsByChainIDResponse>;
  /** Queries all the rate limits for a given channel ID */
  RateLimitsByChannelOrClientID(
    request: QueryRateLimitsByChannelOrClientIDRequest,
  ): Promise<QueryRateLimitsByChannelOrClientIDResponse>;
  /** Queries all blacklisted denoms */
  AllBlacklistedDenoms(request: QueryAllBlacklistedDenomsRequest): Promise<QueryAllBlacklistedDenomsResponse>;
  /** Queries all whitelisted address pairs */
  AllWhitelistedAddresses(request: QueryAllWhitelistedAddressesRequest): Promise<QueryAllWhitelistedAddressesResponse>;
}

export const QueryServiceName = "ibc.applications.rate_limiting.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.AllRateLimits = this.AllRateLimits.bind(this);
    this.RateLimit = this.RateLimit.bind(this);
    this.RateLimitsByChainID = this.RateLimitsByChainID.bind(this);
    this.RateLimitsByChannelOrClientID = this.RateLimitsByChannelOrClientID.bind(this);
    this.AllBlacklistedDenoms = this.AllBlacklistedDenoms.bind(this);
    this.AllWhitelistedAddresses = this.AllWhitelistedAddresses.bind(this);
  }
  AllRateLimits(request: QueryAllRateLimitsRequest): Promise<QueryAllRateLimitsResponse> {
    const data = QueryAllRateLimitsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllRateLimits", data);
    return promise.then((data) => QueryAllRateLimitsResponse.decode(new BinaryReader(data)));
  }

  RateLimit(request: QueryRateLimitRequest): Promise<QueryRateLimitResponse> {
    const data = QueryRateLimitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RateLimit", data);
    return promise.then((data) => QueryRateLimitResponse.decode(new BinaryReader(data)));
  }

  RateLimitsByChainID(request: QueryRateLimitsByChainIDRequest): Promise<QueryRateLimitsByChainIDResponse> {
    const data = QueryRateLimitsByChainIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RateLimitsByChainID", data);
    return promise.then((data) => QueryRateLimitsByChainIDResponse.decode(new BinaryReader(data)));
  }

  RateLimitsByChannelOrClientID(
    request: QueryRateLimitsByChannelOrClientIDRequest,
  ): Promise<QueryRateLimitsByChannelOrClientIDResponse> {
    const data = QueryRateLimitsByChannelOrClientIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RateLimitsByChannelOrClientID", data);
    return promise.then((data) => QueryRateLimitsByChannelOrClientIDResponse.decode(new BinaryReader(data)));
  }

  AllBlacklistedDenoms(request: QueryAllBlacklistedDenomsRequest): Promise<QueryAllBlacklistedDenomsResponse> {
    const data = QueryAllBlacklistedDenomsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllBlacklistedDenoms", data);
    return promise.then((data) => QueryAllBlacklistedDenomsResponse.decode(new BinaryReader(data)));
  }

  AllWhitelistedAddresses(request: QueryAllWhitelistedAddressesRequest): Promise<QueryAllWhitelistedAddressesResponse> {
    const data = QueryAllWhitelistedAddressesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllWhitelistedAddresses", data);
    return promise.then((data) => QueryAllWhitelistedAddressesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
