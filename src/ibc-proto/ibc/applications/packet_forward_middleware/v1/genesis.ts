// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: ibc/applications/packet_forward_middleware/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ibc.applications.packet_forward_middleware.v1";

/** GenesisState defines the packetforward genesis state */
export interface GenesisState {
  /**
   * key - information about forwarded packet: src_channel
   * (parsedReceiver.Channel), src_port (parsedReceiver.Port), sequence value -
   * information about original packet for refunding if necessary: retries,
   * srcPacketSender, srcPacket.DestinationChannel, srcPacket.DestinationPort
   */
  inFlightPackets: { [key: string]: InFlightPacket };
}

export interface GenesisState_InFlightPacketsEntry {
  key: string;
  value?: InFlightPacket | undefined;
}

/**
 * InFlightPacket contains information about original packet for
 * writing the acknowledgement and refunding if necessary.
 */
export interface InFlightPacket {
  originalSenderAddress: string;
  refundChannelId: string;
  refundPortId: string;
  packetSrcChannelId: string;
  packetSrcPortId: string;
  packetTimeoutTimestamp: string;
  packetTimeoutHeight: string;
  packetData: Uint8Array;
  refundSequence: string;
  retriesRemaining: number;
  timeout: string;
  nonrefundable: boolean;
}

function createBaseGenesisState(): GenesisState {
  return { inFlightPackets: {} };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.inFlightPackets).forEach(([key, value]) => {
      GenesisState_InFlightPacketsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = GenesisState_InFlightPacketsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.inFlightPackets[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      inFlightPackets: isObject(object.inFlightPackets)
        ? Object.entries(object.inFlightPackets).reduce<{ [key: string]: InFlightPacket }>((acc, [key, value]) => {
          acc[key] = InFlightPacket.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.inFlightPackets) {
      const entries = Object.entries(message.inFlightPackets);
      if (entries.length > 0) {
        obj.inFlightPackets = {};
        entries.forEach(([k, v]) => {
          obj.inFlightPackets[k] = InFlightPacket.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.inFlightPackets = Object.entries(object.inFlightPackets ?? {}).reduce<{ [key: string]: InFlightPacket }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = InFlightPacket.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGenesisState_InFlightPacketsEntry(): GenesisState_InFlightPacketsEntry {
  return { key: "", value: undefined };
}

export const GenesisState_InFlightPacketsEntry: MessageFns<GenesisState_InFlightPacketsEntry> = {
  encode(message: GenesisState_InFlightPacketsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      InFlightPacket.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState_InFlightPacketsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState_InFlightPacketsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = InFlightPacket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState_InFlightPacketsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? InFlightPacket.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GenesisState_InFlightPacketsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = InFlightPacket.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState_InFlightPacketsEntry>, I>>(
    base?: I,
  ): GenesisState_InFlightPacketsEntry {
    return GenesisState_InFlightPacketsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState_InFlightPacketsEntry>, I>>(
    object: I,
  ): GenesisState_InFlightPacketsEntry {
    const message = createBaseGenesisState_InFlightPacketsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? InFlightPacket.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseInFlightPacket(): InFlightPacket {
  return {
    originalSenderAddress: "",
    refundChannelId: "",
    refundPortId: "",
    packetSrcChannelId: "",
    packetSrcPortId: "",
    packetTimeoutTimestamp: "0",
    packetTimeoutHeight: "",
    packetData: new Uint8Array(0),
    refundSequence: "0",
    retriesRemaining: 0,
    timeout: "0",
    nonrefundable: false,
  };
}

export const InFlightPacket: MessageFns<InFlightPacket> = {
  encode(message: InFlightPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalSenderAddress !== "") {
      writer.uint32(10).string(message.originalSenderAddress);
    }
    if (message.refundChannelId !== "") {
      writer.uint32(18).string(message.refundChannelId);
    }
    if (message.refundPortId !== "") {
      writer.uint32(26).string(message.refundPortId);
    }
    if (message.packetSrcChannelId !== "") {
      writer.uint32(34).string(message.packetSrcChannelId);
    }
    if (message.packetSrcPortId !== "") {
      writer.uint32(42).string(message.packetSrcPortId);
    }
    if (message.packetTimeoutTimestamp !== "0") {
      writer.uint32(48).uint64(message.packetTimeoutTimestamp);
    }
    if (message.packetTimeoutHeight !== "") {
      writer.uint32(58).string(message.packetTimeoutHeight);
    }
    if (message.packetData.length !== 0) {
      writer.uint32(66).bytes(message.packetData);
    }
    if (message.refundSequence !== "0") {
      writer.uint32(72).uint64(message.refundSequence);
    }
    if (message.retriesRemaining !== 0) {
      writer.uint32(80).int32(message.retriesRemaining);
    }
    if (message.timeout !== "0") {
      writer.uint32(88).uint64(message.timeout);
    }
    if (message.nonrefundable !== false) {
      writer.uint32(96).bool(message.nonrefundable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InFlightPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInFlightPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originalSenderAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refundChannelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refundPortId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.packetSrcChannelId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.packetSrcPortId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.packetTimeoutTimestamp = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.packetTimeoutHeight = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.packetData = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.refundSequence = reader.uint64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.retriesRemaining = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.timeout = reader.uint64().toString();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.nonrefundable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InFlightPacket {
    return {
      originalSenderAddress: isSet(object.originalSenderAddress) ? globalThis.String(object.originalSenderAddress) : "",
      refundChannelId: isSet(object.refundChannelId) ? globalThis.String(object.refundChannelId) : "",
      refundPortId: isSet(object.refundPortId) ? globalThis.String(object.refundPortId) : "",
      packetSrcChannelId: isSet(object.packetSrcChannelId) ? globalThis.String(object.packetSrcChannelId) : "",
      packetSrcPortId: isSet(object.packetSrcPortId) ? globalThis.String(object.packetSrcPortId) : "",
      packetTimeoutTimestamp: isSet(object.packetTimeoutTimestamp)
        ? globalThis.String(object.packetTimeoutTimestamp)
        : "0",
      packetTimeoutHeight: isSet(object.packetTimeoutHeight) ? globalThis.String(object.packetTimeoutHeight) : "",
      packetData: isSet(object.packetData) ? bytesFromBase64(object.packetData) : new Uint8Array(0),
      refundSequence: isSet(object.refundSequence) ? globalThis.String(object.refundSequence) : "0",
      retriesRemaining: isSet(object.retriesRemaining) ? globalThis.Number(object.retriesRemaining) : 0,
      timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "0",
      nonrefundable: isSet(object.nonrefundable) ? globalThis.Boolean(object.nonrefundable) : false,
    };
  },

  toJSON(message: InFlightPacket): unknown {
    const obj: any = {};
    if (message.originalSenderAddress !== "") {
      obj.originalSenderAddress = message.originalSenderAddress;
    }
    if (message.refundChannelId !== "") {
      obj.refundChannelId = message.refundChannelId;
    }
    if (message.refundPortId !== "") {
      obj.refundPortId = message.refundPortId;
    }
    if (message.packetSrcChannelId !== "") {
      obj.packetSrcChannelId = message.packetSrcChannelId;
    }
    if (message.packetSrcPortId !== "") {
      obj.packetSrcPortId = message.packetSrcPortId;
    }
    if (message.packetTimeoutTimestamp !== "0") {
      obj.packetTimeoutTimestamp = message.packetTimeoutTimestamp;
    }
    if (message.packetTimeoutHeight !== "") {
      obj.packetTimeoutHeight = message.packetTimeoutHeight;
    }
    if (message.packetData.length !== 0) {
      obj.packetData = base64FromBytes(message.packetData);
    }
    if (message.refundSequence !== "0") {
      obj.refundSequence = message.refundSequence;
    }
    if (message.retriesRemaining !== 0) {
      obj.retriesRemaining = Math.round(message.retriesRemaining);
    }
    if (message.timeout !== "0") {
      obj.timeout = message.timeout;
    }
    if (message.nonrefundable !== false) {
      obj.nonrefundable = message.nonrefundable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InFlightPacket>, I>>(base?: I): InFlightPacket {
    return InFlightPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InFlightPacket>, I>>(object: I): InFlightPacket {
    const message = createBaseInFlightPacket();
    message.originalSenderAddress = object.originalSenderAddress ?? "";
    message.refundChannelId = object.refundChannelId ?? "";
    message.refundPortId = object.refundPortId ?? "";
    message.packetSrcChannelId = object.packetSrcChannelId ?? "";
    message.packetSrcPortId = object.packetSrcPortId ?? "";
    message.packetTimeoutTimestamp = object.packetTimeoutTimestamp ?? "0";
    message.packetTimeoutHeight = object.packetTimeoutHeight ?? "";
    message.packetData = object.packetData ?? new Uint8Array(0);
    message.refundSequence = object.refundSequence ?? "0";
    message.retriesRemaining = object.retriesRemaining ?? 0;
    message.timeout = object.timeout ?? "0";
    message.nonrefundable = object.nonrefundable ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
